"""rework columns to Mapped

Revision ID: e49f90c6caac
Revises: f4cc83f385ec
Create Date: 2024-01-24 21:19:25.200491

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e49f90c6caac'
down_revision: Union[str, None] = 'f4cc83f385ec'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('groups', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('groups', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_unique_constraint(None, 'groups', ['group_id'])
    op.alter_column('medias', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('medias', 'media_unique_id',
               existing_type=sa.VARCHAR(length=250),
               nullable=False)
    op.alter_column('medias', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('medias', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('pokaks', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('pokaks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=250),
               nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=250),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=250),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=250),
               nullable=False)
    op.alter_column('users', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('pokaks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('pokaks', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('medias', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('medias', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('medias', 'media_unique_id',
               existing_type=sa.VARCHAR(length=250),
               nullable=True)
    op.alter_column('medias', 'group_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'groups', type_='unique')
    op.alter_column('groups', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('groups', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    # ### end Alembic commands ###
